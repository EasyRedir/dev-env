#!/usr/bin/env ruby
require 'open3'

class DevTool
  MAIN_HELP_BANNER = <<HEREDOC
Execute various commands within the developer environment

Usage:
  dev [options] [COMMAND] [ARGS...]"
  dev -h|--help

Options:
  --verbose                 Show more output
  -v, --version             Print version and exit

Commands:
  build              Build or rebuild services
  help               Get help on a command
  kill               Kill containers
  logs               View output from containers
  ps                 List containers
  pull               Pulls service images
  restart            Restart services
  rm                 Remove stopped containers
  run                Run a one-off command
  start              Start services
  stop               Stop services
  up                 Create and start containers
  update             Update dev-env developer environment
  proxy              Manage proxy services (nginx and dnsmasq)
  webinject          Open/Run a command line in the web service
  cmd                Open/Run a command in a new app container

HEREDOC

  PROXY_UNMODIFIED_TO_COMPOSE=%w{build kill logs ps pull restart rm start stop}
  PROXY_MODIFIED=%w{up run}
  OTHER_COMMANDS=%w{update proxy webinject cmd}

  def initialize(args)
    if PROXY_UNMODIFIED_TO_COMPOSE.include?(args[0])
      system(args.unshift("docker compose").join(" "))
    elsif PROXY_MODIFIED.include?(args[0])
      send(args[0].to_sym, args)
    elsif OTHER_COMMANDS.include?(args[0])
      send(args.shift.to_sym, args)
    else
      puts MAIN_HELP_BANNER
    end
  end

  def run(args)
    args.insert(1, "--rm")
    args.unshift("docker compose")
    system(args.join(" "))
  end

  def up(args)
    proxy(["up"])
    args.insert(1, "-d")
    args.unshift("docker compose")
    system(args.join(" "))
  end

  def update(args)
    system('cd /usr/local/dev-env && git fetch && git reset --hard origin/master')
    system('ansible-playbook /usr/local/dev-env/ansible/mac.yml -i 127.0.0.1, --ask-become-pass --verbose')
  end

  def proxy(args)
    if (args[0] == "up")
      args.push("-d")
    end
    args.unshift("docker compose", "-f /usr/local/dev-env/docker/dev-env.yml", "-p devenv")
    system(args.join(" "))
  end

  def webinject(args)
    args = ["/bin/bash"] if args.empty?
    container_id = `docker container ls -q -f name=ermanagement_web_`.strip
    if container_id == ""
      puts "Container is not running"
    else
      system("docker exec -i -t #{container_id} #{args.join(" ")}")
    end
  end

  def cmd(args)
    args = ["/bin/bash"] if args.empty?
    args.unshift("run", "worker")
    run(args)
  end
end

DevTool.new(ARGV) if __FILE__==$0
